 1. SQL Injection (SQLi)
Q1. What is SQL Injection?
A: SQL Injection is a vulnerability that allows an attacker to manipulate backend SQL queries by injecting malicious input, often to read or modify database data.

Q2. What is Classic SQLi?
A: It occurs when an attacker directly manipulates SQL syntax to bypass login or dump data using simple payloads like:

sql
Copy
Edit
' OR '1'='1
Q3. What is Blind SQL Injection?
A: The application does not show errors or data directly. Attackers infer information using:

Boolean-based: True/false logic

Time-based: Using delays (e.g., SLEEP(5))

Q4. What is Out-of-Band SQLi?
A: The attacker uses external services like DNS or HTTP to exfiltrate data (e.g., using LOAD_FILE() or xp_dirtree). Used when the app doesnâ€™t return output or respond in time.

Q5. How can SQLi be prevented?
A:

Use prepared statements

Validate and sanitize input

Enforce least privilege

Use ORMs and WAFs

ðŸ”¹ 2. XPath Injection
Q6. What is XPath Injection?
A: XPath Injection targets XML data queries. If user input is directly embedded in an XPath query, attackers can modify XML search logic.

Q7. How is XPath Injection different from SQLi?
A: XPath queries XML instead of databases. Payloads like:

xpath
Copy
Edit
' or '1'='1
can bypass authentication in XML-based systems.

Q8. How to prevent XPath Injection?
A: Avoid concatenating user input into XPath queries. Use parameterized XPath expressions and input validation.

ðŸ”¹ 3. OS Command Injection
Q9. What is Command Injection?
A: A vulnerability where attackers can inject OS-level commands (e.g., ; ls -la) into unsanitized input executed by system functions like system() or exec().

Q10. Difference between Command Injection and Code Injection?
A:

Command Injection: Executes OS/system commands

Code Injection: Injects code into the app (e.g., PHP, Python)

Q11. How to test for Command Injection?
A: Try injecting payloads like:

bash
Copy
Edit
& ping -c 1 attacker.com
; whoami
|| sleep 5
Q12. How to prevent Command Injection?
A:

Avoid using shell commands with user input

Use secure APIs (e.g., Python subprocess.run() with argument list)

Whitelist allowed inputs

ðŸ”¹ 4. XML External Entity (XXE) Injection
Q13. What is XXE?
A: XXE exploits XML parsers that process external entities. Attackers can read local files, perform SSRF, or DoS.

Q14. Example of XXE payload?
xml
Copy
Edit
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<user><name>&xxe;</name></user>
Q15. How to prevent XXE?
A:

Disable external entity resolution

Use secure XML parsers

Use JSON instead of XML where possible

Q16. Whatâ€™s the difference between XXE and SSRF?
A:

XXE: Exploits XML parsers, can lead to SSRF

SSRF: Directly forces server to make internal requests

ðŸ”¹ 5. Server-Side Template Injection (SSTI)
Q17. What is SSTI?
A: SSTI occurs when user input is injected into a server-side template (e.g., Jinja2, Twig) and interpreted as code.

Q18. Whatâ€™s an SSTI payload example?
For Jinja2 (Python):

jinja
Copy
Edit
{{7*7}} â†’ 49
{{config.items()}}
Q19. How is SSTI dangerous?
A: Can lead to:

Remote Code Execution (RCE)

Full system compromise

Credential exposure

Q20. How to prevent SSTI?
A:

Never insert user input into templates directly

Use context-aware escaping

Whitelist allowed template variables

ðŸ”¹ 6. LDAP Injection
Q21. What is LDAP Injection?
A: It occurs when unsanitized input is included in LDAP queries. Can bypass authentication or modify directory queries.

Q22. LDAP Injection payload example?
ldap
Copy
Edit
*)(|(uid=*)) // returns all users
Q23. How to prevent LDAP Injection?
A:

Use parameterized LDAP queries

Escape special characters (e.g., *, (, ))

Input validation

ðŸ”¹ 7. HTTP Host Header Injection
Q24. What is Host Header Injection?
A: Manipulation of the Host: header to:

Bypass password reset links

Poison caches

SSRF via internal host references

Q25. How to detect Host Header Injection?
A: Change Host: to:

Copy
Edit
evil.com
localhost
127.0.0.1
And check for reflected or poisoned behavior in URLs, headers, or redirects.

Q26. How to prevent Host Header Injection?
A:

Validate Host against an allowed list

Donâ€™t construct links/emails using untrusted Host header

Use canonical server-side URLs
